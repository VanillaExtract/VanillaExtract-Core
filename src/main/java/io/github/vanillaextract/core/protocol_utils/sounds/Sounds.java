package io.github.vanillaextract.core.protocol_utils.sounds;

import org.bukkit.Sound;


/**Completed sound list for 1.8->1.9. Still needs testing.
  *
  *Strings in brackets are 1.9 sound names that have to be filled in (as they are too different from their 1.8 counterparts).
  *
  *@author 0ct0ber
  *
  */
public enum Sounds {
	
	AMBIENCE_CAVE ("AMBIENT_CAVE"),
	AMBIENCE_RAIN ("WEATHER_RAIN"),
	AMBIENCE_THUNDER ("ENTITY_LIGHTNING_THUNDER"),
	ANVIL_BREAK,
	ANVIL_LAND,
	ANVIL_USE,
	ARROW_HIT,
	BAT_DEATH,
	BAT_HURT,
	BAT_IDLE,
	BAT_LOOP,
	BAT_TAKEOFF,
	BLAZE_BREATH ("ENTITY_BLAZE_AMBIENT"),
	BLAZE_DEATH,
	BLAZE_HIT,
	BURP ("ENTITY_PLAYER_BURP"),
	CAT_HISS,
	CAT_HIT,
	CAT_MEOW,
	CAT_PURR,
	CAT_PURREOW,
	CHEST_CLOSE,
	CHEST_OPEN,
	CHICKEN_EGG_POP ("ENTITY_CHICKEN_EGG"),
	CHICKEN_HURT,
	CHICKEN_IDLE,
	CHICKEN_WALK,
	CLICK ("BLOCK_STONE_BUTTON_CLICK_ON"),
	COW_HURT,
	COW_IDLE,
	COW_WALK,
	CREEPER_DEATH,
	CREEPER_HISS ("ENTITY_CREEPER_HURT"),
	DIG_GRASS ("BLOCK_GRASS_BREAK"),
	DIG_GRAVEL ("BLOCK_GRAVEL_BREAK"),
	DIG_SAND ("BLOCK_SAND_BREAK"),
	DIG_SNOW ("BLOCK_SNOW_BREAK"),
	DIG_STONE ("BLOCK_STONE_BREAK"),
	DIG_WOOD ("BLOCK_WOOD_BREAK"),
	DIG_WOOL ("BLOCK_CLOTH_BREAK"),
	DONKEY_ANGRY,
	DONKEY_DEATH,
	DONKEY_HIT,
	DONKEY_IDLE,
	DOOR_CLOSE ("BLOCK_WOODEN_DOOR_CLOSE"),
	DOOR_OPEN ("BLOCK_WOODEN_DOOR_OPEN"),
	DRINK ("ENTITY_GENERIC_DRINK"),
	EAT ("ENTITY_GENERIC_EAT"),
	ENDERDRAGON_DEATH,
	ENDERDRAGON_GROWL,
	ENDERDRAGON_HIT,
	ENDERDRAGON_WINGS ("ENTITY_ENDERDRAGON_FLAP"),
	ENDERMAN_DEATH ("ENTITY_ENDERMEN_DEATH"),
	ENDERMAN_HIT ("ENTITY_ENDERMEN_HURT"),
	ENDERMAN_IDLE ("ENTITY_ENDERMEN_AMBIENT"),
	ENDERMAN_SCREAM ("ENTITY_ENDERMEN_SCREAM"),
	ENDERMAN_STARE ("ENTITY_ENDERMEN_STARE"),
	ENDERMAN_TELEPORT ("ENTITY_ENDERMEN_TELEPORT"),
	EXPLODE ("ENTITY_GENERIC_EXPLODE"),
	FALL_BIG ("ENTITY_GENERIC_BIG_FALL"),
	FALL_SMALL ("ENTITY_GENERIC_SMALL_FALL"),
	FIRE ("BLOCK_FIRE_AMBIENT"),
	FIRE_IGNITE ("ITEM_FLINTANDSTEEL_USE"),
	FIREWORK_BLAST ("ENTITY_FIREWORK_BLAST"),
	FIREWORK_BLAST2 ("ENTITY_FIREWORK_BLAST_FAR"),
	FIREWORK_LARGE_BLAST ("ENTITY_FIREWORK_LARGE_BLAST"),
	FIREWORK_LARGE_BLAST2 ("ENTITY_FIREWORK_LARGE_BLAST_FAR"),
	FIREWORK_LAUNCH,
	FIREWORK_TWINKLE ("ENTITY_FIREWORK_TWINKLE"),
	FIREWORK_TWINKLE2 ("ENTITY_FIREWORK_TWINKLE_FAR"),
	FIZZ ("BLOCK_FIRE_EXTINGUISH"),
	FUSE ("ENTITY_TNT_PRIMED"),
	GHAST_CHARGE ("ENTITY_GHAST_WARN"),
	GHAST_DEATH,
	GHAST_FIREBALL ("ENTITY_GHAST_SHOOT"),
	GHAST_MOAN ("ENTITY_GHAST_AMBIENT"),
	GHAST_SCREAM ("ENTITY_GHAST_HURT"),
	GHAST_SCREAM2 ("ENTITY_GHAST_SCREAM"),
	GLASS ("BLOCK_GLASS_BREAK"),
	HORSE_ANGRY,
	HORSE_ARMOR,
	HORSE_BREATHE,
	HORSE_DEATH,
	HORSE_GALLOP,
	HORSE_HIT,
	HORSE_IDLE,
	HORSE_JUMP,
	HORSE_LAND,
	HORSE_SADDLE,
	HORSE_SKELETON_DEATH,
	HORSE_SKELETON_HIT,
	HORSE_SKELETON_IDLE,
	HORSE_SOFT ("ENTITY_HORSE_STEP"),
	HORSE_WOOD ("ENTITY_HORSE_STEP_WOOD"),
	HORSE_ZOMBIE_DEATH,
	HORSE_ZOMBIE_HIT,
	HORSE_ZOMBIE_IDLE,
	HURT_FLESH ("ENTITY_PLAYER_HURT"),
	IRONGOLEM_DEATH,
	IRONGOLEM_HIT,
	IRONGOLEM_THROW ("ENTITY_IRONGOLEM_ATTACK"),
	IRONGOLEM_WALK,
	ITEM_BREAK ("ENTITY_ITEM_BREAK"),
	ITEM_PICKUP ("ENTITY_ITEM_PICKUP"),
	LAVA ("BLOCK_LAVA_AMBIENT"),
	LAVA_POP,
	LEVEL_UP ("ENTITY_PLAYER_LEVELUP"),
	MAGMACUBE_JUMP,
	MAGMACUBE_WALK ("ENTITY_MAGMACUBE_SQUISH"),
	MAGMACUBE_WALK2 ("ENTITY_SMALL_MAGMACUBE_SQUISH"),
	MINECART_BASE ("ENTITY_MINECART_RIDING"),
	MINECART_INSIDE,
	NOTE_BASS,
	NOTE_BASS_DRUM ("BLOCK_NOTE_BASEDRUM"),
	NOTE_BASS_GUITAR ("BLOCK_NOTE_GUITAR"),
	NOTE_PIANO ("BLOCK_NOTE_CHIME"),
	NOTE_PLING,
	NOTE_SNARE_DRUM ("BLOCK_NOTE_SNARE"),
	NOTE_STICKS ("BLOCK_NOTE"),
	ORB_PICKUP ("ENTITY_EXPERIENCE_ORB_PICKUP"),
	PIG_DEATH,
	PIG_IDLE, 
	PIG_WALK,
	PISTON_EXTEND,
	PISTON_RETRACT ("BLOCK_PISTON_CONTRACT"),
	PORTAL ("BLOCK_PORTAL_AMBIENT"),
	PORTAL_TRAVEL,
	PORTAL_TRIGGER,
	SHEEP_IDLE,
	SHEEP_SHEAR,
	SHEEP_WALK,
	SHOOT_ARROW ("ENTITY_ARROW_SHOOT"),
	SILVERFISH_HIT,
	SILVERFISH_IDLE,
	SILVERFISH_KILL,
	SILVERFISH_WALK,
	SKELETON_DEATH,
	SKELETON_HURT,
	SKELETON_IDLE,
	SKELETON_WALK,
	SLIME_ATTACK,
	SLIME_WALK ("ENTITY_SLIME_SQUISH"),
	SLIME_WALK2 ("ENTITY_SMALL_SLIME_SQUISH"),
	SPIDER_DEATH,
	SPIDER_IDLE,
	SPIDER_WALK,
	SPLASH ("ENTITY_PLAYER_SPLASH"),
	SPLASH2 ("ENTITY_PLAYER_SPLASH"),
	STEP_GRASS ("BLOCK_GRASS_STEP"),
	STEP_GRAVEL ("BLOCK_GRAVEL_STEP"),
	STEP_LADDER ("BLOCK_LADDER_STEP"),
	STEP_SAND ("BLOCK_SAND_STEP"),
	STEP_SNOW ("BLOCK_SNOW_STEP"),
	STEP_STONE ("BLOCK_STONE_STEP"),
	STEP_WOOD ("BLOCK_WOOD_STEP"),
	STEP_WOOL ("BLOCK_CLOTH_STEP"),
	SUCCESSFUL_HIT ("ENTITY_ARROW_HIT_PLAYER"),
	SWIM ("ENTITY_PLAYER_SWIM"),
	VILLAGER_DEATH,
	VILLAGER_HAGGLE ("ENTITY_VILLAGER_TRADING"),
	VILLAGER_HIT,
	VILLAGER_IDLE,
	VILLAGER_NO,
	VILLAGER_YES,
	WATER ("BLOCK_WATER_AMBIENT"),
	WITHER_DEATH,
	WITHER_HURT,
	WITHER_IDLE,
	WITHER_SHOOT,
	WITHER_SPAWN,
	WOLF_BARK ("ENTITY_WOLF_AMBIENT"),
	WOLF_DEATH,
	WOLF_GROWL,
	WOLF_HOWL,
	WOLF_HURT,
	WOLF_PANT,
	WOLF_SHAKE,
	WOLF_WALK,
	WOLF_WHINE,
	WOOD_CLICK ("BLOCK_WOOD_BUTTON_CLICK_ON"),
	ZOMBIE_DEATH,
	ZOMBIE_HURT,
	ZOMBIE_IDLE,
	ZOMBIE_INFECT,
	ZOMBIE_METAL ("ENTITY_ZOMBIE_ATTACK_IRON_DOOR"),
	ZOMBIE_PIG_ANGRY,
	ZOMBIE_PIG_DEATH,
	ZOMBIE_PIG_HURT,
	ZOMBIE_PIG_IDLE,
	ZOMBIE_REMEDY ("ENTITY_ZOMBIE_VILLAGER_CURE"),
	ZOMBIE_UNFECT ("ENTITY_ZOMBIE_VILLAGER_CONVERTED"),
	ZOMBIE_WALK,
	ZOMBIE_WOOD ("ENTITY_ZOMBIE_ATTACK_DOOR_WOOD"),
	ZOMBIE_WOODBREAK ("ENTITY_ZOMBIE_BREAK_DOOR_WOOD"),
	SILENT("DIG_WOOL", "BLOCK_CLOTH_BREAK");
	
	private final Sound sound;
	Sounds(String... alternatives) {
		Sound s = trySound(this.name());
		if (s != null) {this.sound = s; return;}
		
		if (alternatives.length == 0) {
			s = trySound("BLOCK_".concat(this.name()));
			if (s != null) {this.sound = s; return;}
			String name = this.name() + "ENTITY_";
			name.replace("IDLE", "AMBIENT").replace("WALK", "STEP");
			s = trySound(name);
			if (s == null) s = trySound(name.replace("HIT", "HURT"));
			this.sound = s;
			return;
		}
		for (String alt : alternatives) {
			Sound sound = trySound(alt);
			if (sound != null) {this.sound = sound; return;}
		}
		this.sound = null;
	}
  
  /**Gets the sound that you would expect in 1.8, for any version in 1.9-1.12.2*/
  public Sound get() {
  return sound;
  }
	
  /**Tries to get the Bukkit sound by the given name. This also accepts null values.
    *
    *@return The sound if it was found; null if it wasn't, or the name provided was null
    *
    */
	public static Sound trySound(String soundname) {
		if (soundname == null) return null;
		try {
			return Sound.valueOf(soundname);
		} catch (IllegalArgumentException ex) {
			return null;
		}
	}
	
}
